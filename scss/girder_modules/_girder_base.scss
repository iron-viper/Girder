//////////////////////////////
// Base Grid for Girder

// Include a broad amount of border-box on everything and profit.
// Override for special cases within selectors
*, *:before, *:after {
	box-sizing: border-box;
		-moz-box-sizing: border-box;
			-webkit-box-sizing: border-box;
}


// Test Mixin for unit widths (Might change to func to use return values later)
@mixin unit($width:whole, $addgutters:true) {

	// Reduce verbosity and simplify by moving this to the extended placeholder
	// @if $nested == true {
	// 	&:first-child {padding-left: 0 !important; padding-top: 0;}
	// 	&:last-child {padding-right: 0 !important; padding-top: 0;}
	// }

	// Handle the no-gutter case but its not pretty, looking for better options
	@if $addgutters == false {
		padding-left: 0 !important;
		padding-right: 0 !important;
	}

	@if $width == 'whole' {
		@extend %whole;
	}
	@else if $width == 'half' {
		@extend %half;
	}
	@else if $width == 'one-third' {
		@extend %one-third;
	}
	@else if $width == 'two-thirds' {
		@extend %two-thirds;
	}
	@else if $width == 'one-quarter' {
		@extend %one-quarter;
	}
	@else if $width == 'three-quarters' {
		@extend %three-quarters;
	}
	@else if $width == 'one-fifth' {
		@extend %one-fifth;
	}
	@else if $width == 'two-fifths' {
		@extend %two-fifths;
	}
	@else if $width == 'three-fifths' {
		@extend %three-fifths;
	}
	@else if $width == 'four-fifths' {
		@extend %four-fifths;
	}
	@else if $width == 'golden-small' {
		@extend %golden-small;
	}
	@else if $width == 'golden-large' {
		@extend %golden-large;
	}
}

// Set up the container width and alignment
.container {
  margin: $container-margins;

	.row {
  	max-width: $container-width;
  }
}

// Flexible grid units using percentages
.row {
	display: block;
	clear: both;
	*zoom: 1;

	%unit {
		float: left;
		width: 100%;
		padding: $gutters / 2;

		// This ensures the outer gutters are equal to the (doubled) inner gutters.
		&:first-child {padding-left: $gutters;}
		&:last-child {padding-right: $gutters;}

		// Try handling nested outer gutters here
		.row &:first-child {padding-left: 0;}
		.row &:last-child {padding-right: 0;}

		// Add a .no-gutters class to a unit to remove gutters
		// Too much unneeded bloat is generated so disabled to find a better option
		// &.no-gutters {
		// 	padding-left: 0;
		// 	padding-right: 0;
		// }
	}

	%whole          { width: 100%;
		@extend %unit; }
	%half           { width: 50%;
		@extend %unit; }
	%one-third      { width: 33.3332%;
		@extend %unit; }
	%two-thirds     { width: 66.6665%;
		@extend %unit; }
	%one-%uarter    { width: 25%;
		@extend %unit; }
	%three-quarters { width: 75%;
		@extend %unit; }
	%one-fifth      { width: 20%;
		@extend %unit; }
	%two-fifths     { width: 40%;
		@extend %unit; }
	%three-fifths   { width: 60%;
		@extend %unit; }
	%four-fifths    { width: 80%;
		@extend %unit; }
	%golden-small   { width: 38.2716%;
		@extend %unit; }
	%golden-large   { width: 61.7283%;
		@extend %unit; }

	// Automagic clearing for rows
	&:after {clear: both;}

	&:before, &:after {
		display: table;
		content: "";
		line-height: 0;
	}
}

// Temporary placeholder code example
// @if $include-html-classes {

// .row {
// @include grid-row;

// .column,
// .columns { @include grid-column($columns:$total-columns); }

// .row { @include grid-row($behavior:nest);
// &.collapse { @include grid-row($behavior:nest-collapse); }
// }
// }