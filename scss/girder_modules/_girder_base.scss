//////////////////////////////
// Base Scss and grid functionality
// Outputs the minimum CSS required to handle units and rows

// Include a broad amount of border-box on everything and profit.
// Override for special cases within selectors
*, *:before, *:after {
	box-sizing: border-box;
		-moz-box-sizing: border-box;
			-webkit-box-sizing: border-box;
}

// Set up the container and alignment row width
.container, .row {
	margin: $container-margins;
	// TODO: Add a check for 'auto' value here
	max-width: $container-width;
}

// Mixin for unit widths (Might change to func to use return values later)
// TODO: Optimize this if statement with a list and a loop
@mixin unit($width:whole, $addgutters:true) {

	// Handle the no-gutter case but its not pretty, looking for better options
	@if $addgutters == false {
		padding-left: 0 !important;
		padding-right: 0 !important;
		.row &:first-of-type {
			padding-left: 0 !important;
		}
	}

	@if $width == 'half' {
		@extend %half;
	}
	@else if $width == 'one-third' {
		@extend %one-third;
	}
	@else if $width == 'two-thirds' {
		@extend %two-thirds;
	}
	@else if $width == 'one-fourth' {
		@extend %one-fourth;
	}
	@else if $width == 'three-fourths' {
		@extend %three-fourths;
	}
	@else if $width == 'one-fifth' {
		@extend %one-fifth;
	}
	@else if $width == 'two-fifths' {
		@extend %two-fifths;
	}
	@else if $width == 'three-fifths' {
		@extend %three-fifths;
	}
	@else if $width == 'four-fifths' {
		@extend %four-fifths;
	}
	@else if $width == 'one-sixth' {
		@extend %one-sixth;
	}
	@else if $width == 'five-sixths' {
		@extend %five-sixths;
	}
	@else if $width == 'golden-small' {
		@extend %golden-small;
	}
	@else if $width == 'golden-large' {
		@extend %golden-large;
	}
	@else {
		@extend %whole;
		@if $use-breakpoint == true {
			@include respond-to('turn single column') {
				padding-right: 0 !important;
			}
		}
		@else {
			@media (min-width: 10em) and (max-width: $small-breakpoint) {
				text-align: inherit;
			}
		}
	}
}

// Row class and flexible grid units (percentage based)
// This is the only CSS that Girder outputs by default
.row {
	clear: both;
	display: block;

	%unit {
		float: left;
		padding: $gutters / 2;
		width: 100%;

		// Ensures outer gutters match inner gutters (moved to parent .row)
		// &:first-of-type {padding-left: $gutters;}
		// &:last-child {padding-right: $gutters;}

		// Handling nested outer gutters here (Deprecated for neg margin)
		// .row &:first-of-type {padding-left: 0;}
		// .row &:last-child {padding-right: 0;}

		// Add a .no-gutters class to a unit to remove gutters (experimental)
		@if $html-classes == true {
			.no-gutters > &:first-of-type {
				padding-left: 0;
				padding-right: 0;
			}
		}
	}

	%half           { width: 50%;
		@extend %unit; }
	%one-third      { width: 33.3332%;
		@extend %unit; }
	%two-thirds     { width: 66.6665%;
		@extend %unit; }
	%one-fourth    { width: 25%;
		@extend %unit; }
	%three-fourths { width: 75%;
		@extend %unit; }
	%one-fifth      { width: 20%;
		@extend %unit; }
	%two-fifths     { width: 40%;
		@extend %unit; }
	%three-fifths   { width: 60%;
		@extend %unit; }
	%four-fifths    { width: 80%;
		@extend %unit; }
	%one-sixth      { width: 16.6666%;
		@extend %unit; }
	%five-sixths      { width: 83.3333%;
		@extend %unit; }
	%golden-small   { width: 38.2716%;
		@extend %unit; }
	%golden-large   { width: 61.7283%;
		@extend %unit; }
	%whole {
		width: 100%;
		padding: $gutters /2 0;
		padding-right: $gutters;
	}

	// Automagic clearing for rows
	&:after {clear: both;}

	&:before, &:after {
		display: table;
		content: "";
		line-height: 0;
	}

	// Lets add outer gutters to top level row
	padding-right: $gutters;
	padding-left: $gutters;
	// but remove them when nested or specified
	&.no-gutters, .row, .row .row  {padding-left: 0; padding-right: 0;}

	// Remove nested outer gutters at css level
	.row > :first-of-type {padding-left: 0;}
	.row > :last-child {padding-right: 0;}

	// Option to add outer gutters back in to keep third+ units even
	&.equal-units {
		> :first-of-type {padding-left: $gutters / 2 !important;}
		> :last-child {padding-right: $gutters / 2 !important;}
	}

	// .row clearing haxor
	*zoom: 1;
}


// Push units up to four eighths including gutters (experimental)
// Nested rows should contain homogeneous units with em-based gutters
@mixin pushover-units {
	@if not $html-classes {
		$gutterpercent: $gutters * $em-base / 100;
		.push-one,
		.push-two,
		.push-three,
		.push-four {
			position: relative;
		}
		// We'll attempt to align with eights going up to half-page
		.push-one { left: 12.5% + strip-unit($gutterpercent); }
		.push-two { left: 25% + strip-unit($gutterpercent); }
		.push-three { left: 37.5% + strip-unit($gutterpercent); }
		.push-four { left: 50% + strip-unit($gutterpercent); }
	}
}

@if $include-extras == true {
	// Optional: classes to push units (.push-one to .push-four)
	@include pushover-units;
}


// Only include these classes if the option exists
@if $html-classes == true {
	$units: (whole 100%), (half 50%), (one-third 33.3332%), (two-thirds 66.6665%), (one-fourth 25%), (three-fourths 75%), (one-fifth 20%), (two-fifths 40%), (three-fifths 60%), (four-fifths 80%), (one-sixth 16.6666%), (five-sixths 83.3333%), (golden-small 38.2716%), (golden-large 61.7283%);

	@each $unit in $units {
	  .#{nth($unit, 1)} {
	    width: #{nth($unit, 2)};
	    @extend .unit;
	  }
	}

	.unit {
		float: left;
		padding: $gutters / 2;
		width: 100%;

		&:first-of-type {padding-left: $gutters;}
		&:last-child {padding-right: $gutters;}

		.row &:first-of-type {padding-left: 0;}
		.row &:last-child {padding-right: 0;}
	}

	$gutterpercent: $gutters * $em-base / 100;
	.push-one,
	.push-two,
	.push-three,
	.push-four {
		position: relative;
	}
	// We'll attempt to align with eights going up to half-page
	.push-one { left: 12.5% + strip-unit($gutterpercent); }
	.push-two { left: 25% + strip-unit($gutterpercent); }
	.push-three { left: 37.5% + strip-unit($gutterpercent); }
	.push-four { left: 50% + strip-unit($gutterpercent); }
}
