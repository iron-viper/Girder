//////////////////////////////
// Utility Mixins and classes

// Clear floats etc
@mixin clearfix() {
	*zoom:1;
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}


// Return rem units with pixel fallback
// This takes an rem value (just a number)
// Returns a pixel fall back based on our $em-base
// Usage: @include font-size(2);
@mixin font-size($sizeValue: 1.8) {
	$size: strip-unit($sizeValue);
	font-size: ($size * $em-base);
	font-size: $size + rem;
}


// Modified Version of the Excellent Panels Mixin from Zurb
// ----------------------------
// Panel Variables
//
// Control the background and border styles
$panel-bg:              darken(#fff, 5%) !default;
$panel-border-color:    darken($panel-bg, 15%) !default;
// Set default inner padding and bottom margin
$panel-margin-bottom:   0 !default;
$panel-padding:         emCalc(20px) !default;
// Set default font colors
$panel-font-color:      #333 !default;
$panel-font-color-alt:  #fff !default;
// Panel Mixin
@mixin panel($bg:$panel-bg, $padding:$panel-padding, $filler:false) {

	text-align: center;
	font-size: .6em;
	border-radius: 3px;

  @if $bg {
		$bg-lightness: lightness($bg);

		border-style: solid;
		border-width: 1px;
		border-color: darken($bg, 15%);
		margin-bottom: $panel-margin-bottom;
		margin-top: 0;
		padding: $padding $padding / 2;

		background: $bg;

		// We set the font color based on the darkness of the bg and if we are using filler content
		@if $bg-lightness >= 50% and $filler == true        { h1,h2,h3,h4,p { color: $panel-font-color-alt; } }
		@else if $bg-lightness >= 50% and $filler == true   { h1,h2,h3,h4,p { color: $panel-font-color; } }
		@else if $filler == true {
			h1,h2,h3,h4,p { color: $panel-font-color-alt;
			line-height: 1; margin-bottom: emCalc(20px) / 2;
			}
		}
    // Respect the padding, fool.
    // &>:first-child { padding-top: 0; }
    // &>:last-child { padding-bottom: 0; }
	}
}


// Basic Mixin for text alignments
// Usage: @include text-align(right);
@mixin text-align($direction) {
	@if $direction == left {
		text-align: #{$direction} !important;
	}
	@else if $direction == right {
		text-align: #{$direction} !important;
	}
	@else if $direction == center {
		text-align: #{$direction} !important;
	}
	@else if $direction == justify {
		text-align: #{$direction} !important;
	}
	@else {
		@warn '"#{$direction}" is not a valid alignment for the text-align() mixin.';
	}
}


// Only include these classes if the option exists
// Girder option to include presentational clases for html elements
// Useful for classes in your HTML like: <p class="right text-right">Go Right!</h2>
@if $html-classes == true {
	// Utility classes for presentational markup
	.left         { float: left; margin-right: .8em; }
	.right        { float: right; margin-left: .8em; }
	.hide         { display: none !important; visibility: hidden; }
	// Write out classes for text-alignment
	@each $direction in left, right, center, justify {
		.text-#{$direction} {text-align: #{$direction} !important;}
	}
}


// Utility placeholders - Not used at this point
// %hide         { display: none !important; visibility: hidden; }