@charset "UTF-8";
/* //////////////////////////////////////////////// */
/*   Girder is a Sassy grid toolkit     ////////// */
/*   Simple, Responsive & Semantic     ////////// */
/*   https://github.com/unmaya/Girder ////////// */
/* //////////////////////////////////////////// */

/* This is the CSS version of Girder which was designed for use with Scss.
In this form it requires presentational classes in HTML which is
exactly what I wanted to avoid by building it with Sass / Scss. */

/* Include a broad amount of border-box on everything and profit. */
/* Override for special cases within selectors */
*, *:before, *:after {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
}

/* Adjust this to fit your preference for an em base
By default its set to the current standard of 100% (1em = 16px) */
html {font-size: 16px;}

/* Set up your wrapping container to a fixed width if desired */
.container, .row {
  margin-left: auto;
  margin-right: auto;
  max-width: auto;
}

/* Automatically clear rows and column / unit groupings */
/* Rows are the primary building blocks for Girder */
.row {
  display: block;
  clear: both;
  *zoom: 1;

  /* Lets add outer gutters to top level row 1.25em = 20px using 16px base */
  padding-left: 1.25em;
  padding-right: 1.25em;
}
.row:after {clear: both;}
.row:before, .row:after {
  display: table;
  content: "";
  line-height: 0;
}

/* All units will float left and use ems for gutter spacing */
.row .unit {
  float: left;
  width: 100%;
  padding: 0.625em;
  /* 0.625em = 10px with a 16px base font */
}

/* remove row gutter when nested or specified */
.row.no-gutters, .row .row  {padding-left: 0; padding-right: 0;}

/* remove nested outer gutters */
.row > :first-of-type {padding-left: 0;}
.row > :last-child {padding-right: 0;}

/* Option to add them back in to keep third+ units equal */
.row.equal-units > :first-of-type  {padding-left: 0.625em !important;}
.row.equal-units > :last-child {padding-right: 0.625em !important;}

/* Lets remove the padding - gutter for nested units */
/* We can also remove just left or right gutter with .alpha .omega */
.row .unit:first-of-type,
.alpha {padding-left: 0;}
.row .unit:last-child,
.omega {padding-right: 0;}

/* Units are named based on how a row can be divided 1 - 6 parts */
.whole {width: 100%;}
.half, .two-quarters {width: 50%;}
.one-third, .two-sixths {width: 33.3332%;}
.two-thirds, .four-sixths {width: 66.6665%;}
.one-quarter {width: 25%;}
.three-quarters {width: 75%;}
.one-fifth {width: 20%;}
.two-fifths {width: 40%;}
.three-fifths {width: 60%;}
.four-fifths {width: 80%;}
.one-sixth {width: 16.6666%;}
.five-sixths {width: 83.3333%;}
.golden-small {width: 38.2716%;}
.golden-large {width: 61.7283%;}

/* Remove padding (gutter) for units inside a row or for a specific unit */
.row.no-gutters .unit, .unit.no-gutters {padding: 0;}

/* Sure, push things around if that's your thing */
.push-one,
.push-two,
.push-three,
.push-four {
  position: relative;
}
.push-one {left: 13.9%;}
.push-two {left: 26.4%;}
.push-three {left: 38.9%;}
.push-four {left: 51.4%;}

/* Your standard presentational clearing class. Boo! Seriously, try Sass. */
.clear {
  clear: both;
  display: block;
  overflow: hidden;
  visibility: hidden;
  width: 0;
  height: 0;
}

/* Utility classes to align text and float / hide elements (optional) */
.left {
  float: left;
  margin-right: .8em;
}
.right {
  float: right;
  margin-left: .8em;
}
.hide {
  display: none !important;
  visibility: hidden;
}

/* Small classes will only apply to viewports below 35.5em or 568px (with a 16px base) */
.center-small {text-align: center;}
.hide-small {display: none;}

@media (min-width: 35.5em) {
  .hide-small {display: block;}
  .center-small {text-align: inherit;}
}

@media (min-width: 10em) and (max-width: 35.5em) {
  .row.equal-units > :first-of-type {padding-left: 0;}
  .row.equal-units > :last-child {padding-right: 0;}

   /* All units can go full-width here */
  .unit {
    padding-left: 0;
    padding-right: 0;
    width: 100%;

    left: 0;
    /* Reset neg. margin for nested grids */
    margin-left: inherit;
  }
}